actions/action_manager.py:71:            tunnel_id = action.descriptor
actions/action_manager.py:72:            return self.route_finder.planner.get_rows(agent, tunnel_id)

coordinator_tools.py:327:    # if speech: os.system('spd-say "%s, %s" -r 10 -t female2 -w'%(id, basic_msg));

encapsuators.py:171:                T[t][r] = [n.split('-')[3][1:] for n in self.empty_node_list if n.startswith('tall-t'+t+'-r'+r)]

rasberry_coordinator.py:290:                if self.action_print: logmsg(category='action', msg='Finding rows in tunnel: %s'%N)
rasberry_coordinator.py:353:    def find_rows(self, agent, tunnel_id):
rasberry_coordinator.py:354:        return self.route_finder.planner.get_rows(agent, tunnel_id)

route_planners/base_planner.py:41:    def get_rows(self, agent, tunnel_id):
route_planners/base_planner.py:42:        row_prefix = "%s-r"%tunnel_id
route_planners/base_planner.py:42:        row_prefix = "%s-r"%tunnel_id

route_planners/fragment_planner.py:389:        #Exit early if the node is not in a tunnel

task_management/base.py:189:            state, tunnel, row, edge, task, robot = self.msg.value.split('-')
task_management/base.py:192:            elif tunnel == "select": return (None,None)
task_management/base.py:195:                nodes = ["tall-t%s-r%s-c%s" % (tunnel, row, e) for e in edge.split('>')]
task_management/base.py:195:                nodes = ["tall-t%s-r%s-c%s" % (tunnel, row, e) for e in edge.split('>')]
task_management/base.py:197:            elif tunnel != "select": task_scope = 'tunnel'
task_management/base.py:199:                'tunnel': 'tall-t'+tunnel,
task_management/base.py:200:                'row': 'tall-t'+tunnel+'-r'+row,
task_management/base.py:200:                'row': 'tall-t'+tunnel+'-r'+row,
task_management/base.py:620:        """Used to generate a list of row tasks given a tunnel id."""
task_management/base.py:622:            """Display the tunnel id to generate tasks for."""
task_management/base.py:623:            return "%s(%s)" % (self.get_class(), self.tunnel)
task_management/base.py:624:        def __init__(self, agent, tunnel, response_task):
task_management/base.py:625:            """Save the tunnel details"""
task_management/base.py:627:            self.tunnel = tunnel
task_management/base.py:629:            self.action = ActionDetails(type='info', info='find_rows', descriptor=tunnel)
task_management/base.py:640:            """Display the tunnel id to generate tasks for."""

task_management/modules/data_collection.py:129:    def data_collection_scan_tunnel(cls, agent, task_id=None, details=None, contacts=None, initiator_id=""):
task_management/modules/data_collection.py:132:                     name="data_collection_scan_tunnel",
task_management/modules/data_collection.py:139:                         StageDef.FindRowsDM(agent, details['tunnel'])
task_management/modules/data_collection.py:162:        """Used to assign the data_collection_scan_row task to all rows in the given tunnel."""
task_management/modules/data_collection.py:163:        def __init__(self, agent, tunnel):
task_management/modules/data_collection.py:165:            super(StageDef.FindRowsDM, self).__init__(agent, tunnel, 'data_collection_scan_row')
task_management/modules/data_collection.py:33:            self.sub_tunnel   = Subscriber('/%s/data_collection/initiate_task/tunnel'   % agent.agent_id, TopoLocation, self.tunnel)
task_management/modules/data_collection.py:39:                # msg.tunnel = 1
task_management/modules/data_collection.py:42:                nodeA = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[0])
task_management/modules/data_collection.py:42:                nodeA = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[0])
task_management/modules/data_collection.py:43:                nodeB = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[1])
task_management/modules/data_collection.py:43:                nodeB = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[1])
task_management/modules/data_collection.py:50:                # msg.tunnel = 1
task_management/modules/data_collection.py:52:                row = "%s-t%s-r%s"%(msg.type, msg.tunnel, msg.row)
task_management/modules/data_collection.py:52:                row = "%s-t%s-r%s"%(msg.type, msg.tunnel, msg.row)
task_management/modules/data_collection.py:56:        def tunnel(self, msg):
task_management/modules/data_collection.py:59:                #msg.tunnel = 1
task_management/modules/data_collection.py:60:                tunnel = "%s-t%s"%(msg.type, msg.tunnel)
task_management/modules/data_collection.py:63:                self.agent.add_task(task_name='data_collection_scan_tunnel', details={"tunnel": tunnel})

task_management/modules/uv_treatment.py:130:    def uv_treatment_treat_tunnel(cls, agent, task_id=None, details=None, contacts=None, initiator_id=""):
task_management/modules/uv_treatment.py:133:                     name="uv_treatment_treat_tunnel",
task_management/modules/uv_treatment.py:140:                         StageDef.FindRowsUV(agent, details['tunnel'])
task_management/modules/uv_treatment.py:163:        """Used to assign the uv_treatment_treat_row task to all rows in the given tunnel."""
task_management/modules/uv_treatment.py:164:        def __init__(self, agent, tunnel):
task_management/modules/uv_treatment.py:166:            super(StageDef.FindRowsUV, self).__init__(agent, tunnel, 'uv_treatment_treat_row')
task_management/modules/uv_treatment.py:33:            self.sub_tunnel   = Subscriber('/%s/uv_treatment/initiate_task/tunnel'   % agent.agent_id, TopoLocation, self.tunnel)
task_management/modules/uv_treatment.py:39:                # msg.tunnel = 1
task_management/modules/uv_treatment.py:42:                nodeA = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[0])
task_management/modules/uv_treatment.py:42:                nodeA = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[0])
task_management/modules/uv_treatment.py:43:                nodeB = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[1])
task_management/modules/uv_treatment.py:43:                nodeB = "%s-t%s-r%s-c%s"%(msg.type, msg.tunnel, msg.row, msg.edge_node[1])
task_management/modules/uv_treatment.py:50:                # msg.tunnel = 1
task_management/modules/uv_treatment.py:52:                row = "%s-t%s-r%s"%(msg.type, msg.tunnel, msg.row)
task_management/modules/uv_treatment.py:52:                row = "%s-t%s-r%s"%(msg.type, msg.tunnel, msg.row)
task_management/modules/uv_treatment.py:56:        def tunnel(self, msg):
task_management/modules/uv_treatment.py:59:                #msg.tunnel = 1
task_management/modules/uv_treatment.py:60:                tunnel = "%s-t%s"%(msg.type, msg.tunnel)
task_management/modules/uv_treatment.py:63:                self.agent.add_task(task_name='uv_treatment_treat_tunnel', details={"tunnel": tunnel})
